= Fitbit Protocol Documentation
By Kyle Machulis <kyle@nonpolynomial.com>
Version 0.1, February 6, 2011

== Introduction

The Fitbit is a small clipon accelerometer that functions as a
pedometer, distance meter, and calorie counter. It uses the ANT
protocol to talk to a base, connected to a computer via USB. This
document outlines communication both with the base unit/device via
USB, as well as synchronizing with fitbit's web service.

== Important Document Information

=== References

We recommend the following references to go along with this document:

- ANT Message and Protocol Documentation: http://www.thisisant.com/images/Resources/PDF/1204662412_ant%20message%20protocol%20and%20usage.pdf
- FitBit FAQ: http://www.fitbit.com/faq
- FitBit Manual: http://www.fitbit.com/manual

=== Terminology

- Base: Refers to the ANT base station, connected by USB to the host
  computer.
- Tracker: The clip-on Fitbit device

=== Packet Documentation

When packets layouts are show in this document, we use the full ANT
packet to keep things consistent. 

== What We Don't Know

As this section will probably be updated frequently, I'm putting it
near the top for now. This lists things I haven't figured out about
the fitbit's protocol and client yet.

- How the erase opcodes work
- Exactly what data we're getting from the website to send to the
  device in the erase step
- How the seconds data is stored/parsed
- What the encrypted attribute on opcodes in the website response xml
  means
- How authentication setup with the website works
- How device bonding with the website account works

== Reverse Engineering Methodology

Reverse engineering the Fitbit is relatively easy. From the USB side,
it is not using encryption to talk to the base station, and it
communicates using an unmodified ANT protocol, so the basic gist of
messages can be learned simply by reading the ANT protocol
documentation. Any USB based filter driver may be used to log the data
flowing to and from the base station.

For further analysis, the Fitbit's service logs are amazingly
helpful. For the windows installation of the Fitbit software, the logs
are located at

C:\Documents and Settings\All Users\Application Data\Fitbit\Tracker\logs

Daily logs are stored in plain text with the filename format

log-YYYYDDMMHHMMSS.txt

There may be multiple log files generated. Each log file has a
complete record of both USB and website communications, with copious
amounts of annotation. Each call to and response from the device and
website is logged and even sometimes documented.

The USB information in the logs truncates most of the ANT protocol
specific information. USB communication looks something like

------
02/02 22:25:36 Setting channel id [number: 65535, type: 1, transmission: 1]...
02/02 22:25:36 [40] 0x00, 0x51, 0x00
02/02 22:25:36 Channel id set.
02/02 22:25:36 Opening channel...
02/02 22:25:36 [40] 0x00, 0x4b, 0x00
02/02 22:25:36 Channel opened.
02/02 22:25:42 [9A] 0x00, 0x58, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02/02 22:25:42 Acquired beacon.  Sending RESET packet...
02/02 22:25:42 Queuing packet to send...
02/02 22:25:42 >>>>> SEND 0x78, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02/02 22:25:42 Sending 8 bytes of ACK data...
02/02 22:25:42 [9A] 0x00, 0x58, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02/02 22:25:42 [05] 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02/02 22:25:42 Pending acks: 0
02/02 22:25:42 Tracker reset.  Sending LINK REQUEST...
02/02 22:25:42 Queuing packet to send...
02/02 22:25:42 >>>>> SEND 0x78, 0x02, 0x8b, 0x7a, 0x00, 0x00, 0x00, 0x00
02/02 22:25:42 Sending 8 bytes of ACK data...
02/02 22:25:42 [9A] 0x00, 0x58, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02/02 22:25:42 [05] 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02/02 22:25:42 Pending acks: 0
02/02 22:25:42 Closing channel...
02/02 22:25:42 [40] 0x00, 0x4c, 0x00
02/02 22:25:42 Close request acknowledged...
02/02 22:25:42 [02] 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02/02 22:25:42 Waiting for close message -- ignoring incoming data
02/02 22:25:42 [07] 0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
------

This is not a complete log of USB messages, however, the explanations
of some of the messages are quite useful for translating the actions
into code.

While working on the web communication, it was also found that error
messages about communications flow were quite helpful. Errors are
served as a comment block at the beginning of a response. For example:

------
<!-- Error: getDeviceInfoHandler should be getting result of one opCodes -->

<!-- Error: Tracker object is null. This is impossible within normal
flow. Something is hitting
com.fitbit.app.device.tracker.dumpData.DumpDataActionBeanviolating a
predefined flow. -->
------

These logs and messages were massively helpful in finishing the web
protocol commmunication. Many thanks to the fitbit engineers for
writing readable error messages and logs.

=== Issues With User Security

Not everything is happiness and sunshine, however.

While information stored on Fitbit's website may not be of the utmost
privacy importance (though having random people know when you sleep is
a little creepy), this information should still be guarded by at least
semisecure means. However, there are multiple situations where this is
not the case.

During initial login via the client software, user passwords are
passed to the website as part of POST data, in the clear. They are
also stored to the text log files in the clear. This can be seen in
the following log block, with my personal account data removed.

------
01/28 23:31:55 Sending 4357 bytes of HTML to UI...
01/28 23:31:55 Processing request...
01/28 23:31:55 Waiting for minimum display time to elapse [1000ms]...
01/28 23:31:56 Waiting for form input...
01/28 23:31:57 [POWER EVENT] POWER STATUS CHANGE
01/28 23:32:04 [POWER EVENT] POWER STATUS CHANGE
01/28 23:32:14 UI [\\.\pipe\Fitbit|kyle]: F
01/28 23:32:14 Processing action 'form'...
01/28 23:32:14 Received form input: email=[YOUR UNENCRYPTED EMAIL HERE]&password=[YOUR UNENCRYPTED PASSWORD HERE]&[other stuff]
01/28 23:32:14 Connecting [2]: POST to http://client.fitbit.com:80/device/tracker/pairing/signupHandler with data: 
               email=[YOUR UNENCRYPTED EMAIL HERE]&password=[YOUR UNENCRYPTED PASSWORD HERE]&[other stuff]
01/28 23:32:14 Processing action 'http'...
01/28 23:32:14 Received HTTP response:
------

The URLs and POST data are saved, and the processing action is "http",
not "https". Oddly enough, login on Fitbit's actual website is https.

When syncing data to the website, no authentication is used, and all
requests are sent in clear http. The tracker ID is bonded to the
account of the user, and when the website receives the tracker ID, it
responds with the user ID. Once again, since all of this happens in
the clear, it would be easy to inject data into anyone's account, via
either ANT or website sniffing. Why one would do this is beyond me,
just saying, is all.

== Website Communication

=== Account Establishment and Tracker Bonding

Nothing yet known about this.

=== Data Synchronization

Communication with the website happens via HTTP requests to a REST
API, with replies of XML blocks. These blocks contain opcodes to send
to the device, as well as information the website will need to
identify the device in later commands.

Opcodes and their results are encoded via base64. 

The data flow between the website and the client happens in the follow
order (all commands go to http://client.fitbit.com, REST locations are
listed below):

- Client receives beacon from tracker, establishes link (see Fitbit
  Communication section)
- Client contacts website at /device/tracker/uploadData, sends basic
  client and platform information
- Website replies with opcode for tracker data request
- Client gets tracker data (serial number, firmware version, etc...),
  sends base response. Sends to /device/tracker/dumpData/lookupTracker
- Website replies with website tracker and user ids based on tracker
  serial number, and opcodes for data dumping
- Client dumps data from device, sends to
  /device/tracker/dumpData/dumpData
- Website replies with commands to erase data from device, and
  synchronize time (and possibly data?) with website.
- Client sends successful responses on all opcodes (but no specific
  data) to website at /device/tracker/dumpData/clearDataConfigTracker
- Website replies with command to close tracker, and have the beacon
  sleep for 15 minutes (probably conserves power).

=== Web Response XML Schema

== Fitbit Communication

This section covers communicate with the base and tracker via USB
and ANT. It is assumed that the reader is familiar with the USB and
ANT protocols. For those not familiar with ANT, it's fairly easy to
follow along with the Message and Protocol documentation in the
references section. For those not familiar with USB, go outside and
play. Preferably with your fitbit on.

=== Base Initialization

Initializing the base unit happens whenever the unit is plugged in, or
the client program is brought up. This consists of sending USB control
messages and ANT protocol messages to configure the device to the
right baud rate, channel, etc...

=== Establishing Tracker Communication

Once the base is configured, it starts sending out read requests on
channel 0. Assuming it hasn't been told to sleep, the tracker sends
out a beacon once a second on channel 0. The beacon is a data packet
that looks like:

------
A4 09 4E 00 00 00 00 00 00 00 00 00 E3
------

=== Querying Tracker Information

=== Data Dumping

=== Device Erasing

== Data Formats

=== Second Data

=== 5 Minute Interval Data

=== Daily/Per Sync Data

